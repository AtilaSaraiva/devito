#### HOST CONFIGURATION https://github.com/NVIDIA/nvidia-docker

## NVIDIA DRIVER : https://linuxconfig.org/how-to-install-the-nvidia-drivers-on-ubuntu-20-04-focal-fossa-linux
# sudo apt-get install nvidia-driver-470
# sudo reboot

## DOCKER
# sudo apt-get update && sudo apt-get install docker-compose

## NVIDIA CONTAINER TOOLKIT https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker
# distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
#    && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
#    && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
# sudo apt-get update
# sudo apt-get install -y nvidia-docker2
# sudo systemctl restart docker
# sudo docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi # testing

## ---- oracle cloud : devito-docker-nvidia

##### DEVITO'S OPENMP DOCKER
# sudo docker build -t devito/ompoffload:1.0 -f Dockerfile.omp_offload .
# sudo docker run --gpus all --rm -it devito/ompoffload:1.0

FROM nvidia/cuda:10.1-devel-ubuntu18.04

ENV DEBIAN_FRONTEND noninteractive
CMD ["/bin/bash"]
# RUN export DEVITO_MAHCINE_PHYSICAL_CORES=$(( $(lscpu | awk '/^Socket\(s\)/{ print $2 }') * $(lscpu | awk '/^Core\(s\) per socket/{ print $4 }') ))
# RUN echo "DEVITO_MAHCINE_PHYSICAL_CORES = ${DEVITO_MAHCINE_PHYSICAL_CORES}"

## install prerequisites
RUN apt-get update
RUN apt-get install -y --no-install-recommends apt-utils
RUN apt-get install -y --no-install-recommends build-essential
# RUN apt-get install -y --no-install-recommends cmake
RUN apt-get install -y --no-install-recommends libelf-dev
RUN apt-get install -y --no-install-recommends libffi-dev
RUN apt-get install -y --no-install-recommends pkg-config
RUN apt-get install -y --no-install-recommends libnuma-dev
RUN apt-get install -y --no-install-recommends gcc-multilib
RUN apt-get install -y --no-install-recommends g++-multilib
RUN apt-get install -y --no-install-recommends wget
# latest cmake
RUN apt-get install -y --no-install-recommends software-properties-common
RUN apt-get install -y --no-install-recommends lsb-release
RUN wget -q -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
RUN apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
RUN apt-get update
RUN apt-get -y --no-install-recommends install cmake

## install clang 13
RUN wget -q https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-13.0.0.tar.gz
RUN tar -xf llvmorg-13.0.0.tar.gz
WORKDIR /llvm-project-llvmorg-13.0.0
RUN mkdir build
WORKDIR /llvm-project-llvmorg-13.0.0/build
RUN cmake ../llvm/ -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD="X86;NVPTX" -DLLVM_ENABLE_PROJECTS="clang" -DLLVM_ENABLE_RUNTIMES="openmp" -DCMAKE_INSTALL_PREFIX=/llvm13
# !!! '12' IN NEXT LINE IS HARDCODED
RUN make -j 12
RUN make install
WORKDIR /
RUN rm -rf llvmorg-13.0.0.tar.gz llvm-project-llvmorg-13.0.0
ENV PATH /llvm13/bin:${PATH}
ENV LD_LIBRARY_PATH /llvm13/lib:${LD_LIBRARY_PATH}